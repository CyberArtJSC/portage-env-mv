--- a/lib/portage/sync/syncbase.py
+++ a/lib/portage/sync/syncbase.py
@@ -201,33 +201,7 @@
 		@type openpgp_env: gemato.openpgp.OpenPGPEnvironment
 		"""
 		out = portage.output.EOutput(quiet=('--quiet' in self.options['emerge_config'].opts))
-		out.ebegin('Refreshing keys from keyserver')
-		retry_decorator = self._key_refresh_retry_decorator()
-		if retry_decorator is None:
-			openpgp_env.refresh_keys()
-		else:
-			def noisy_refresh_keys():
-				"""
-				Since retry does not help for some types of
-				errors, display errors as soon as they occur.
-				"""
-				try:
-					openpgp_env.refresh_keys()
-				except Exception as e:
-					writemsg_level("%s\n" % (e,),
-						level=logging.ERROR, noiselevel=-1)
-					raise # retry
-
-			# The ThreadPoolExecutor that asyncio uses by default
-			# does not support cancellation of tasks, therefore
-			# use ForkExecutor for task cancellation support, in
-			# order to enforce timeouts.
-			loop = global_event_loop()
-			with ForkExecutor(loop=loop) as executor:
-				func_coroutine = functools.partial(loop.run_in_executor,
-					executor, noisy_refresh_keys)
-				decorated_func = retry_decorator(func_coroutine, loop=loop)
-				loop.run_until_complete(decorated_func())
+		out.ebegin('Skipping key refreshing')
 		out.eend(0)
 
 
